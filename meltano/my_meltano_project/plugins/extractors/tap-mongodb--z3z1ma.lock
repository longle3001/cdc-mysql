{
  "plugin_type": "extractors",
  "name": "tap-mongodb",
  "namespace": "tap_mongodb",
  "variant": "z3z1ma",
  "label": "MongoDB",
  "docs": "https://hub.meltano.com/extractors/tap-mongodb--z3z1ma",
  "repo": "https://github.com/z3z1ma/tap-mongodb",
  "pip_url": "git+https://github.com/z3z1ma/tap-mongodb.git",
  "executable": "tap-mongodb",
  "description": "General purpose, document-based, distributed database.",
  "logo_url": "https://hub.meltano.com/assets/logos/extractors/mongodb.png",
  "capabilities": [
    "about",
    "batch",
    "catalog",
    "discover",
    "schema-flattening",
    "state",
    "stream-maps"
  ],
  "settings_group_validation": [
    [
      "mongo"
    ]
  ],
  "settings": [
    {
      "name": "batch_config",
      "kind": "object",
      "label": "Batch Config",
      "description": "Batch configuration as defined [here](https://sdk.meltano.com/en/latest/batch.html#batch-configuration)."
    },
    {
      "name": "database_excludes",
      "kind": "array",
      "label": "Database Excludes",
      "description": "A list of databases to exclude. If this list is empty, no databases will be excluded."
    },
    {
      "name": "database_includes",
      "kind": "array",
      "label": "Database Includes",
      "description": "A list of databases to include. If this list is empty, all databases will be included."
    },
    {
      "name": "faker_config.locale",
      "kind": "array",
      "label": "Faker Config Locale",
      "description": "One or more LCID locale strings to produce localized output for: https://faker.readthedocs.io/en/master/#localization"
    },
    {
      "name": "faker_config.seed",
      "kind": "string",
      "label": "Faker Config Seed",
      "description": "Value to seed the Faker generator for deterministic output: https://faker.readthedocs.io/en/master/#seeding-the-generator"
    },
    {
      "name": "flattening_enabled",
      "kind": "boolean",
      "label": "Flattening Enabled",
      "description": "'True' to enable schema flattening and automatically expand nested properties."
    },
    {
      "name": "flattening_max_depth",
      "kind": "integer",
      "label": "Flattening Max Depth",
      "description": "The max depth to flatten schemas."
    },
    {
      "name": "infer_schema_max_docs",
      "kind": "integer",
      "value": 2000,
      "label": "Infer Schema Max Docs",
      "description": "The maximum number of documents to sample when inferring the schema. This is only used when infer_schema is true."
    },
    {
      "name": "mongo",
      "kind": "object",
      "label": "Mongo",
      "description": "These props are passed directly to pymongo MongoClient allowing the tap user full flexibility not provided in other Mongo taps since every kwarg can be tuned."
    },
    {
      "name": "mongo_file_location",
      "kind": "string",
      "value": "",
      "label": "Mongo File Location",
      "description": "Optional file path, useful if reading mongo configuration from a file."
    },
    {
      "name": "optional_replication_key",
      "kind": "boolean",
      "value": false,
      "label": "Optional Replication Key",
      "description": "This setting allows the tap to continue processing if a document is missing the replication key. Useful if a very small percentage of documents are missing the property."
    },
    {
      "name": "strategy",
      "kind": "options",
      "value": "raw",
      "label": "Strategy",
      "description": "The strategy to use for schema resolution. Defaults to 'raw'. The 'raw' strategy uses a relaxed schema using additionalProperties: true to accept the document as-is leaving the target to respect it. Useful for blob or jsonl. The 'envelope' strategy will envelope the document under a key named `document`. The target should use a variant type for this key. The 'infer' strategy will infer the schema from the data based on a configurable number of documents.",
      "options": [
        {
          "label": "Raw",
          "value": "raw"
        },
        {
          "label": "Envelope",
          "value": "envelope"
        },
        {
          "label": "Infer",
          "value": "infer"
        }
      ]
    },
    {
      "name": "stream_map_config",
      "kind": "object",
      "label": "Stream Map Config",
      "description": "User-defined config values to be used within map expressions."
    },
    {
      "name": "stream_maps",
      "kind": "object",
      "label": "Stream Maps",
      "description": "Config object for stream maps capability. For more information check out [Stream Maps](https://sdk.meltano.com/en/latest/stream_maps.html)."
    },
    {
      "name": "stream_prefix",
      "kind": "string",
      "value": "",
      "label": "Stream Prefix",
      "description": "Optionally add a prefix for all streams, useful if ingesting from multiple shards/clusters via independent tap-mongodb configs. This is applied during catalog generation. Regenerate the catalog to apply a new stream prefix."
    }
  ]
}